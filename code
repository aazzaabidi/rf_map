import sys
import os
import numpy as np
from sklearn.ensemble import RandomForestClassifier
#import pandas
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import PredefinedSplit
from pathlib import Path
from sklearn.metrics import f1_score, accuracy_score, confusion_matrix, cohen_kappa_score
import timeit
from pandas import DataFrame
import seaborn as sns
import rasterio 
start = timeit.default_timer()

train_X= np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/train_X_pxl_3.npy')
train_y = np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/train_y_3.npy')
test_X = np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/test_X_pxl_3.npy')
test_y = np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/test_y_3.npy')
valid_X = np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/valid_X_pxl_3.npy')
valid_y = np.load('/mnt/DATA/AZZA/3_Transformation-2D/splits/dordogne/valid_y_3.npy')

train_X= train_X.reshape(train_X.shape[0],-1)
test_X= test_X.reshape(test_X.shape[0],-1)
valid_X= valid_X.reshape(valid_X.shape[0],-1)



# Varying hyperparameters
print ("RUN RANDOM FOREST")

tuned_parameters = {'n_estimators': [200,300,400,500],
                     'max_depth': [20,40,60,80,100]}



# Concatenate for training and hyperparameters selection on validation set
X = np.concatenate((train_X,valid_X),axis=0)
y = np.concatenate((train_y,valid_y),axis=0)


mytestfold = []
mytestfold.extend([-1]*train_y.size)
mytestfold.extend([0]*valid_y.size)
ps = PredefinedSplit(test_fold=mytestfold)



# Fit
clf = GridSearchCV(estimator=RandomForestClassifier(), param_grid=tuned_parameters,cv=ps,n_jobs=-1,verbose=2)
clf.fit(X, y)



# Predict on test set
test_pred = clf.predict(test_X)


# Compute scores on test set
print ('f1_score',f1_score(test_y,test_pred,average='weighted'))
print ('f1_score',f1_score(test_y,test_pred,average=None))
print ('accuracy_score',accuracy_score(test_y,test_pred))
print ('cohen_kappa_score',cohen_kappa_score(test_y,test_pred))

# Confusion matrix 

labels= ['Built-up','Water','Forest','Moor','Orchards','Vines','Culture']
cm = confusion_matrix(test_y,test_pred,normalize='true')
print (np.around(cm,2))
cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
df_cm = DataFrame(cm, index=labels, columns=labels)
ax = sns.heatmap(df_cm, annot=True , cmap="YlGnBu")
matrix = ax.get_figure()    
#matrix.savefig('/mnt/DATA/AZZA/3_Transformation-2D/results/dor/RF3.png', dpi=1500)


stop = timeit.default_timer()
print('Time: ', stop - start)



bands=np.load('/mnt/DATA/AZZA/3_Transformation-2D/results/map/bandsdr.npy')



predict_prob=clf.predict(bands)
pred_f=predict_prob.reshape(5412, 5592)

    # retrieve profile of images
with rasterio.open('/mnt/DATA/AZZA/Datasets/dordogne/B2_DORDOGNE_2016_CONCAT_S2_GAPF_NORM.tif') as ds:
    profile = ds.profile
    
    # update profile since segmentation has only 1 band
    profile.update(count=1,nodata=None,dtype=rasterio.int32)
    # save to tif
with rasterio.open('/mnt/DATA/AZZA/3_Transformation-2D/results/dor/RF3.tif','w',**profile) as outds:
    outds.write(pred_f.astype(rasterio.int32),1) 


